import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def graphforbestbin(DF,X,Y,n=5,q=20,graph=True):
    """
    自动最优分箱函数，基于卡方检验的分箱

    参数：
    DF：需要输入的数据
    X：需要分箱的列名
    Y：分箱数据对应的标签Y列名
    n:保留分箱个数
    q:初始分箱的格式
    graph:是否画出iv图像

    区间为前开后闭（]

    """
    DF = DF[[X,Y]].copy()
    
    DF["qcut"],bins = pd.qcut(DF[X], retbins=True, q=q, duplicates="drop")
    coount_y0 = DF.loc[DF[Y]==0].groupby(by="qcut").count()[Y]
    coount_y1 = DF.loc[DF[Y]==1].groupby(by="qcut").count()[Y]
    num_bins = [*zip(bins,bins[1:],coount_y0,coount_y1)]
    
    for i in range(q):
        if 0 in num_bins[0][2:]:
            num_bins[0:2] = [(
                num_bins[0][0],
                num_bins[1][1],
                num_bins[0][2]+num_bins[1][2],
                num_bins[0][3]+num_bins[1][3])]
            continue
            
        for i in range(len(num_bins)):
            if 0 in num_bins[i][2:]:
                num_bins[i-1:i+1] = [(
                    num_bins[i-1][0],
                    num_bins[i][1],
                    num_bins[i-1][2]+num_bins[i][2],
                    num_bins[i-1][3]+num_bins[i][3])]
                break
        else:
            break
            
    def get_woe(num_bins):
        columns = ["min","max","coount_0","coount_1"]
        df = pd.DataFrame(num_bins,columns=columns)
        df["total"]=df.coount_0+df.coount_1
        df["percentage"]=df.total/df.total.sum()
        df["bad_rate"]=df.coount_1/df.total
        df["good%"]=df.coount_0/df.coount_0.sum()
        df["bad%"]=df.coount_1/df.coount_1.sum()
        df["woe"]=np.log(df["good%"]/df["bad%"])
        return df
    
    def get_iv(df):
        rate = df["good%"] - df["bad%"]
        iv = np.sum(rate * df.woe)
        return iv
    
    iv = []
    axisx = []
    while len(num_bins) > n:
        pvs = []
        #获取num_bins_两两之间的卡方检验的置信度（或卡方值）
        for i in range(len(num_bins)-1):
            x1 = num_bins[i][2:]
            x2 = num_bins[i+1][2:]
            #0返回chi2值，1返回p值
            pv = scipy.stats.chi2_contingency([x1,x2])[1]
            #chi2=scipy.stats.chi2_contingency([x1,x2])[0]
            pvs.append(pv)

        #通过p值进行处理，合并p值最大的两组
        i = pvs.index(max(pvs))
        num_bins[i:i+2] = [(
            num_bins[i][0],
            num_bins[i+1][1],
            num_bins[i][2]+num_bins[i+1][2],
            num_bins[i][3]+num_bins[i+1][3])]
   

        bins_df = pd.DataFrame(get_woe(num_bins))
        axisx.append(len(num_bins))
        iv.append(get_iv(bins_df))
 
    if graph:    
        plt.figure()
        plt.plot(axisx,iv)
        plt.xticks(axisx)
        plt.xlabel("number of box")
        plt.ylabel("iv")
        plt.show()
    return bins_df
